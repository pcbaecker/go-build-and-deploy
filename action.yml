name: 'Go build and deploy'
description: 'This action builds the actual go repository into a docker image and then writes the image name into a .yaml file'
inputs:
  goprivate:
    description: 'The value that should be set for the GOPRIVATE env e.g. github.com/pcbaecker'
    required: false
    default: ''
  repoaccesstoken:
    description: 'The token used to access the private repositories'
    required: false
    default: ${{ github.token }}
  container-registry:
    description: 'host of the container registry'
    required: false
    default: ghcr.io
  container-username:
    description: 'username to login to the container registry'
    required: false
    default: ${{ github.actor }}
  container-password:
    description: 'The password used to login to the container registry'
    required: false
    default: ${{ github.token }}
  container-imagename:
    description: 'The name of the container image'
    required: false
    default: ${{ github.repository }}
  deploy-repository:
    description: 'The name of the repository where the deployment .yamls are'
    required: false
    default: ''
  deploy-file:
    description: 'Path to the target deployment.yaml file'
    required: false
    default: ''
  platform:
    description: 'The desired platform to be built for'
    required: false
    default: 'amd64'
  run-tests:
    description: 'If tests should be run or not'
    required: false
    default: true
  master-branch-name:
    description: 'Name of the master / main branch'
    required: false
    default: 'master'
  target-branch:
    description: 'Name of the target branch, where the updated yaml file will be commited to'
    required: false
    default: 'master'
outputs:
  container-image:
    description: "Name of the built and deployed container image"
    value: ${{ steps.docker-imagename.outputs.name }}
runs:
  using: "composite"
  steps:
  - uses: actions/checkout@v3

  - name: Set up Go
    uses: actions/setup-go@v4
#    with:
#      go-version: 1.20

  - name: Setup Go private modules repositories
    run: go env -w GOPRIVATE=${{ inputs.goprivate }}
    shell: bash

  - name: Git config for private repositories
    run: git config --global url.https://${{ inputs.repoaccesstoken }}@github.com/.insteadOf https://github.com/
    shell: bash

  - name: Go test
    if : ${{ inputs.run-tests}} == true
    run: go test
    shell: bash

  - name: Setup Go target architecture
    run: go env -w GOARCH=${{ inputs.platform }}
    shell: bash

  - name: Build the Go executable
    run:  go build -o executable
    shell: bash

  - name: Set up Docker Context for Buildx
    id: buildx-context
    run: docker context create builders
    shell: bash

  - name: Set up Docker Buildx
    id: buildx
    uses: docker/setup-buildx-action@v2
    with:
      version: latest
      endpoint: builders

  - name: Log in to the Container registry
    uses: docker/login-action@v1.12.0
    with:
      registry: ${{ inputs.container-registry }}
      username: ${{ inputs.container-username }}
      password: ${{ inputs.container-password }}

  - name: Extract metadata (tags, labels) for Docker
    id: docker-metadata
    uses: docker/metadata-action@v3.6.2
    with:
      images: ${{ inputs.container-registry }}/${{ inputs.container-imagename }}
      tags: |
        type=sha,prefix={{branch}}-
        {{branch}}

  - name: Build and push Docker image
    uses: docker/build-push-action@v4
    with:
      context: .
      push: true
      tags: ${{ steps.docker-metadata.outputs.tags }}
      labels: ${{ steps.docker-metadata.outputs.labels }}
      platforms: linux/${{ inputs.platform }}

  - name: Find the complete docker image name
    id: docker-imagename
    shell: bash
    run: |
      echo "::set-output name=name::${{fromJSON(steps.docker-metadata.outputs.json).tags[1]}}"  
      
  - name: Echo
    shell: bash
    run: echo "${{ steps.docker-imagename.outputs.name }}"

  - name: Checkout k8s repository
    uses: actions/checkout@v2
    if : ${{ inputs.deploy-repository != '' }}
    with:
      ref: 'master'
      repository: ${{ inputs.deploy-repository }}
      path: deploy-repo
      token: ${{ inputs.repoaccesstoken }}

  - name: Update Image Version in the related k8s repo deployment.yaml
    uses: fjogeleit/yaml-update-action@main
    if : ${{ inputs.deploy-repository != '' }}
    with:
      valueFile: ${{inputs.deploy-file}}
      propertyPath: 'spec.template.spec.containers[0].image'
      value: ${{ steps.docker-imagename.outputs.name }}
      repository: ${{ inputs.deploy-repository }}
      message: 'Update container image to ${{ steps.docker-imagename.outputs.name }}'
      token: ${{ inputs.repoaccesstoken }}
      workDir: deploy-repo
      branch: ${{ inputs.target-branch }}
      masterBranchName: ${{ inputs.master-branch-name }}
